---
import BaseLayout from "@layouts/BaseLayout.astro"
import Article from "@components/Article.astro"
import Dropdown from "@components/Dropdown.astro"
import OutputBox from "@/components/OutputBox.astro"
---

<BaseLayout title="RNN Language Model">
  <Article>
    <div style="display: flex; flex-wrap: wrap; gap: 0.5rem; align-items: center;">
      <label for="selection" style="font-weight: bold;">Book:</label>
      <Dropdown id="selection" style="padding: 0.25rem 0.5rem;"></Dropdown>
      <button id="generate" disabled style="padding: 0.4rem 0.8rem; flex-basis: 100%; max-width: max-content; ">Loading..</button>
    </div>
	<div id="output" style="margin-top: 1rem; font-family: ui-monospace, Menlo, monospace;"></div>

	<div style="border-top:  0.2rem solid #000; margin-top: 3rem; ">
		<p>Fusce tortor quam, egestas in posuere quis, porttitor vel turpis. Donec vulputate porttitor augue at rhoncus. Proin iaculis consectetur sagittis. Curabitur venenatis turpis sit amet purus tristique nec posuere risus laoreet. Nullam nisi sem, dapibus id semper id, egestas vel arcu. Morbi porttitor ipsum placerat erat consequat sed consequat purus feugiat. Donec auctor elit ut risus mattis facilisis. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
        <p>Proin vulputate sapien facilisis leo ornare pulvinar. Fusce tempus massa a risus semper iaculis. Suspendisse sollicitudin posuere nunc, sit amet rutrum leo facilisis mattis. Sed ornare auctor dui, vitae rutrum neque auctor sit amet. Proin ac dui magna. Mauris vehicula interdum augue, nec ultrices libero egestas quis. Nunc convallis euismod ipsum, id sollicitudin orci consequat ac. Fusce bibendum congue libero, in rutrum nulla congue non. Cras sit amet risus tortor, eu pellentesque dui. Phasellus euismod enim non nibh sodales quis consectetur lorem laoreet. Vivamus a egestas quam. Curabitur in tortor augue, vitae varius tellus. Integer varius, elit ac gravida suscipit, eros erat pellentesque nisi, et tristique augue odio id nulla. Aliquam sit amet nunc vel tellus hendrerit tempus ac vel sem.</p>
        <p>Aenean tincidunt sollicitudin sapien ut porttitor. Curabitur molestie adipiscing lorem vel scelerisque. Donec vitae interdum est. Proin rutrum vulputate faucibus. Suspendisse sit amet felis odio, non volutpat ante. Sed eu lectus quam. Curabitur tristique rhoncus est, vel commodo tortor suscipit semper. Maecenas feugiat vestibulum nisi id facilisis. Nulla non tincidunt libero. Praesent ultrices interdum commodo. Sed euismod nisl auctor leo ultrices rutrum. Aliquam nibh felis, congue molestie blandit at, bibendum at eros. Aenean tincidunt, tortor iaculis placerat sollicitudin, lorem justo tempor diam, et posuere sapien leo et magna. Quisque vel aliquam mauris.</p>        

		<p>You can find the PyTorch code for this model, as well as some of my other language modelling projects, in this <a href="https://github.com/ruitaiS/language_models">[GitHub Repository]</a>.</p>
	</div>

    <script>
      import { initialize_ort } from "@scripts/ort_handler";
      const { ort, session } = await initialize_ort();
	  type Tensor = import('onnxruntime-web').Tensor;
	  
	  const selection = document.getElementById('selection')! as HTMLSelectElement;
      const button = document.getElementById('generate')! as HTMLButtonElement;
      const output = document.getElementById('output')! as HTMLElement;
	  
      const model_assets = await fetch('/bible-rnn/model_assets.json').then(r => r.json());
      const idx2token = [...model_assets.specials, ...model_assets.chars];
      const token2idx: Record<string, number> = {};
      for (let i = 0; i < idx2token.length; i++) {
        token2idx[idx2token[i]] = i;
      }
      button.disabled = false;
      button.textContent="Generate";

	  function multinomial(probs: ArrayLike<number>){
		  let acc = 0;
		  const r = Math.random();
		  for (let i = 0; i < probs.length; i++){
			  acc += probs[i];
			  if (r < acc){
				  return i;
			  };
		  };
		  return token2idx['\n']; // End token as fallback
	  };

	  async function prime_hidden(priming_indices: number[]){
		  const h = new ort.Tensor(
			  'float32',
			  new Float32Array(model_assets.lstm_layers * model_assets.hidden_dim),
			  [model_assets.lstm_layers, 1, model_assets.hidden_dim]);
		  const c = new ort.Tensor(
			  'float32',
			  new Float32Array(model_assets.lstm_layers * model_assets.hidden_dim),
			  [model_assets.lstm_layers, 1, model_assets.hidden_dim]);

		  const hidden = { "h": h, "c": c };
		  let token_idx = token2idx['\n']; // Fallback
		  for (let i = 0; i < priming_indices.length; i++){
			  // Prime the hidden state
			  // Final value of token_idx is our first response token
			  token_idx = await next_token(priming_indices[i], hidden);
		  }
		  return { token_idx, hidden }
	  };

	  const buf = new BigInt64Array(1);
	  async function next_token(token_idx: number, hidden: Record<string, Tensor>){
		  buf[0] = BigInt(token_idx);
		  const output = await session.run({
			  "input_idx": new ort.Tensor('int64', buf, [1,1]),
			  "input_h": hidden.h,
			  "input_c": hidden.c
		  });
		  hidden.h = output['h'];
		  hidden.c = output['c'];
		  const probs = output['probs'].data as Float32Array;
		  return multinomial(probs);
	  };

      async function sample(prime: string) {
		  let response = "";
		  const priming_indices = Array.from(prime).map(char => token2idx[char]);
		  let { token_idx, hidden } = await prime_hidden(priming_indices);
		  while (idx2token[token_idx] != '\n' && response.length < 500){
			  response = response + idx2token[token_idx];
			  output.textContent = `${response}`;
			  await new Promise(requestAnimationFrame); // TODO: worker + rAF; this is too slow
			  token_idx = await next_token(token_idx, hidden);
		  };		  
	  };
      button.addEventListener('click', () => {
        sample(selection.value);
      });
    </script>
  </Article>
</BaseLayout>
