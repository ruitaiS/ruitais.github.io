---
import BaseLayout from "@layouts/BaseLayout.astro"
import Article from "@components/Article.astro"
import Dropdown from "@components/Dropdown.astro"
---

<BaseLayout title="RNN Language Model">
  <Article>
    <div style="display: flex; gap: 0.5rem; align-items: center;">
      <label for="selection" style="font-weight: bold;">Book:</label>
      <Dropdown id="selection" style="padding: 0.25rem 0.5rem;"></Dropdown>
      <button id="generate" disabled style="padding: 0.4rem 0.8rem;">Loading..</button>
    </div>

    <div id="output" style="margin-top: 1rem; font-family: ui-monospace, Menlo, monospace;"></div>

    <script>
      import { initialize_ort } from "@scripts/ort_handler"
      const selection = document.getElementById('selection');
      const button = document.getElementById('generate');
      const output = document.getElementById('output');

      const { ort, session } = await initialize_ort();
      const model_assets = await fetch('/bible-rnn/model_assets.json').then(r => r.json());
      const idx2token = [...model_assets.specials, ...model_assets.chars];
      const token2idx = {};
      for (let i = 0; i < idx2token.length; i++) {
        token2idx[idx2token[i]] = i;
      }
      button.disabled = false;
      button.textContent="Generate";

	  async function prime_hidden(priming_indices){
		  const h = new ort.Tensor(
			  'float32',
			  new Float32Array(model_assets.lstm_layers * model_assets.hidden_dim),
			  [model_assets.lstm_layers, 1, model_assets.hidden_dim]);
		  const c = new ort.Tensor(
			  'float32',
			  new Float32Array(model_assets.lstm_layers * model_assets.hidden_dim),
			  [model_assets.lstm_layers, 1, model_assets.hidden_dim]);

		  let token_idx = null;
		  for (let i = 0; i < priming_indices.length; i++){
			  // Prime the hidden state
			  // final value of token_idx is our first response token
			  token_idx = await next_token(priming_indices[i], h, c);
		  }
		  return { token_idx, h, c }
	  };

	  async function next_token(token_idx, h, c){
		  // TODO
		  // Wrap onnx export so it is (token_idx, h, c) => (logits, new_h, new_c)
		  // Update h, c in-place
		  // Select and return next_idx from logits
		  const next_idx = 5;
		  return next_idx
	  };

      async function sample(prime) {
		  const response_tokens = [];
		  const priming_indices = Array.from(prime).map(char => token2idx[char]);
		  let { token_idx, h, c } = await prime_hidden(priming_indices);
		  while (idx2token[token_idx] != '\n' && response_tokens.length < 500){
			  response_tokens.push(token_idx);
			  token_idx = await next_token(token_idx, h, c);
		  };
		  const response = response_tokens.map(i => idx2token[i]).join('');
		  console.log({response})
		  output.textContent = `${response}`;

		  //console.log({prime});
		  //console.log({priming_indices});
		  //console.log({ h, c });
		  //console.log({idx2token});
		  //console.log({token2idx});
		  //console.log(session);
		  //console.log(ort);
		  //output.textContent = `Prime Chars: ${prime}`;
	  };
      button.addEventListener('click', () => {
        sample(selection.value);
      });
    </script>
  </Article>
</BaseLayout>
